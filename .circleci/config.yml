# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/node:7.10

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
        
      # run tests!
      - run:
          name: Run tests 
          command: |
            ./cc-test-reporter before-build
            npm test
            ./cc-test-reporter after-build --debug --exit-code $?
      
      # prepare and upload dist artifact
      - run:
          name: tar
          command: tar --exclude='cc-test-reporter' --exclude='coverage' --exclude='.circleci' --exclude='.git' --exclude='spec' --exclude='.gitignore' --exclude='.jshintrc' --exclude='LICENSE' --exclude='README.md' -zcvf /tmp/dist.tar.gz .
      - store_artifacts:
          path: /tmp/dist.tar.gz
  deploy:
    docker:
      - image: circleci/node:7.10

    working_directory: ~/dist

    steps:
      - run: sudo apt install -y rsync
      - run: curl https://circleci.com/api/v1.1/project/github/rd-uk/sms-sender/latest/artifacts?circle-token=$CIRCLE_TOKEN | grep -o 'https://[^"]*' > artifacts.txt
      - run: <artifacts.txt xargs -P4 -I % wget -qO- %?circle-token=$CIRCLE_TOKEN | tar xvz
      - run: rm artifacts.txt
      - run:
          name: prepare dir
          command: ssh -o "StrictHostKeyChecking no" $PROD_USER@$PROD_HOSTNAME "rm -rf ~/workers/sms-sender && mkdir -p ~/workers/sms-sender"
      - run:
          name: rsync
          command: cd ~/ && rsync ~/dist/ $PROD_USER@$PROD_HOSTNAME:~/workers/sms-sender/

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
